// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using store_management_api.DBcontext;

#nullable disable

namespace store_management_api.Migrations
{
    [DbContext(typeof(UsuarioContext))]
    [Migration("20221110051148_initialST-M")]
    partial class initialSTM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("store_management_api.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UbicacionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            EntryDate = new DateTime(2100, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honda cbr 600cc ",
                            Price = 59600,
                            Quantity = 10,
                            UbicacionId = 3
                        },
                        new
                        {
                            Id = 1,
                            EntryDate = new DateTime(2100, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yamaha r6 600cc ",
                            Price = 60700,
                            Quantity = 7,
                            UbicacionId = 3
                        },
                        new
                        {
                            Id = 2,
                            EntryDate = new DateTime(2100, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honda tornado 250cc ",
                            Price = 5000,
                            Quantity = 20,
                            UbicacionId = 1
                        },
                        new
                        {
                            Id = 3,
                            EntryDate = new DateTime(2100, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vespa 150cc ",
                            Price = 3500,
                            Quantity = 25,
                            UbicacionId = 2
                        });
                });

            modelBuilder.Entity("store_management_api.Entities.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExpDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ubicaciones");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            ExpDate = false,
                            NameLocation = "600cc",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 1,
                            ExpDate = false,
                            NameLocation = "250cc",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpDate = true,
                            NameLocation = "150cc",
                            UsuarioId = 2
                        });
                });

            modelBuilder.Entity("store_management_api.Entities.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "rc@gmail.com",
                            LastName = "carlos",
                            Name = "roberto",
                            Password = "12b03226a6d8be9c6e8cd5e55dc6c7920caaa39df14aab92d5e3ea9340d1c8a4d3d0b8e4314f1f6ef131ba4bf1ceb9186ab87c801af0d5c95b1befb8cedae2b9",
                            Role = "Deposito"
                        },
                        new
                        {
                            Id = 1,
                            Email = "ac1@gmail.com",
                            LastName = "canapino",
                            Name = "agustin",
                            Password = "12b03226a6d8be9c6e8cd5e55dc6c7920caaa39df14aab92d5e3ea9340d1c8a4d3d0b8e4314f1f6ef131ba4bf1ceb9186ab87c801af0d5c95b1befb8cedae2b9",
                            Role = "Deposito"
                        });
                });

            modelBuilder.Entity("store_management_api.Entities.Producto", b =>
                {
                    b.HasOne("store_management_api.Entities.Ubicacion", "Ubicaciones")
                        .WithMany("Productos")
                        .HasForeignKey("UbicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ubicaciones");
                });

            modelBuilder.Entity("store_management_api.Entities.Ubicacion", b =>
                {
                    b.HasOne("store_management_api.Entities.Usuarios", "Usuario")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("store_management_api.Entities.Ubicacion", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("store_management_api.Entities.Usuarios", b =>
                {
                    b.Navigation("Ubicaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
